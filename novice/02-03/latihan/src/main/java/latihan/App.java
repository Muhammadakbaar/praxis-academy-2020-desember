/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package latihan;

import latihan.satu.*;
import latihan.dua.*;
import latihan.tiga.*;
import java.util.Scanner;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void mainMenu(String[] args) throws InterruptedException {
        
        Scanner scan = new Scanner(System.in);
        Integer pilih;
        System.out.println("=========================");
        System.out.println("Latihan 02-03");
        System.out.println("=========================");
        System.out.println("[1] Oracle JDK Tutorial - Concurrency");
        System.out.println("[2] Different Approaches to Concurrent Programming in Java");
        System.out.println("[3] Tutorial di vogella.com.");
        System.out.println("[0] Exit");
        System.out.println("Masukkan pilihan Anda...");
        pilih = scan.nextInt();
        switch (pilih) {
            case 1:
                pilihSatu(args);
                break;
            case 2:
                pilihDua(args);
                break;
            case 3:

                break;
            case 0:
                System.exit(0);
            default:
                break;
        }

    }

    public static void pilihDua(String[] args) throws InterruptedException {
        Scanner scan = new Scanner(System.in);
        Integer pilih;
        System.out.println("======================================================");
        System.out.println("Different Approaches to Concurrent Programming in Java");
        System.out.println("======================================================");
        System.out.println("[1] MainAppRunnable");
        System.out.println("[2] Java Program to depict Concurrent Programming in action");
        System.out.println("[3] Concurrent programming using Anonymous Inner Class");
        System.out.println("[4] Code for Concurrent programming using Lambda Expression");
        System.out.println("[9] Back");
        System.out.println("[0] Exit");
        System.out.println("Masukkan pilihan Anda...");
        pilih = scan.nextInt();
        switch (pilih) {
            case 1:
                MainAppRunnable.mulai();
                pilihDua(args);
                break;
            case 2:
                OuterClass.mulai();
                pilihDua(args);
                break;
            case 3:
                MyClass o1 = new MyClass();
                o1.mulai();
                pilihDua(args);
                break;
            case 4:
                MyClass2.mulai();
                pilihDua(args);
            case 9:
                mainMenu(args);
            default:
                break;
        }
    }

    public static void pilihSatu(String[] args) throws InterruptedException {
        Scanner scan = new Scanner(System.in);
        Integer pilih;
        System.out.println("=================================");
        System.out.println("Oracle JDK Tutorial - Concurrency");
        System.out.println("=================================");
        System.out.println("[1] Hello Runnable");
        System.out.println("[2] Hello Thread");
        System.out.println("[3] Sleep Messages");
        System.out.println("[4] Simple Threads");
        System.out.println("[5] Deadlock");
        System.out.println("[6] Producer Consumer Example");
        System.out.println("[9] Back");
        System.out.println("[0] Exit");
        System.out.println("Silahkan masukkan pilihan Anda...");
        pilih = scan.nextInt();
        switch (pilih) {
            case 1:
                HelloRunnable.mulai();
                pilihSatu(args);
                break;
            case 2:
                HelloThread.mulai();
                pilihSatu(args);
                break;
            case 3:
                SleepMessages.mulai();
                pilihSatu(args);
                break;
            case 4:
                SimpleThreads.main(args);
                pilihSatu(args);
                break;
            case 5:
                Deadlock.mulai();
                pilihSatu(args);
                break;
            case 6:
                ProducerConsumerExample.mulai();
                pilihSatu(args);
                break;
            case 9:
                mainMenu(args);
                break;
            case 0:
                System.exit(0);
            default:
                break;
        }
    }

    public static void main(String[] args) throws InterruptedException {
        
        mainMenu(args);
    }
}

